// tslint:disable
/// <reference path="./custom.d.ts" />
/**
 * Vanilla API
 * This API helps calculate gear effectiveness
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @enum {string}
 */
export enum AttrIdentifier {
    SpellHit = 'SpellHit',
    SpellCrit = 'SpellCrit',
    Arcane = 'Arcane',
    Fire = 'Fire',
    Frost = 'Frost',
    Holy = 'Holy',
    Nature = 'Nature',
    Shadow = 'Shadow'
}

/**
 * 
 * @export
 * @interface ReqFields
 */
export interface ReqFields {
    /**
     * 
     * @type {Stats}
     * @memberof ReqFields
     */
    stats: Stats;
    /**
     * 
     * @type {SpecIdentifier}
     * @memberof ReqFields
     */
    spec: SpecIdentifier;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum SpecIdentifier {
    FireMage = 'FireMage',
    FrostMage = 'FrostMage',
    Warlock = 'Warlock',
    BalanceDruid = 'BalanceDruid',
    ElementalShaman = 'ElementalShaman',
    ShadowPriest = 'ShadowPriest'
}

/**
 * 
 * @export
 * @interface Stats
 */
export interface Stats {
    /**
     * 
     * @type {number}
     * @memberof Stats
     */
    crit: number;
    /**
     * 
     * @type {number}
     * @memberof Stats
     */
    arcane: number;
    /**
     * 
     * @type {number}
     * @memberof Stats
     */
    hit: number;
    /**
     * 
     * @type {number}
     * @memberof Stats
     */
    shadow: number;
    /**
     * 
     * @type {number}
     * @memberof Stats
     */
    frost: number;
    /**
     * 
     * @type {number}
     * @memberof Stats
     */
    holy: number;
    /**
     * 
     * @type {number}
     * @memberof Stats
     */
    fire: number;
    /**
     * 
     * @type {number}
     * @memberof Stats
     */
    healing: number;
    /**
     * 
     * @type {number}
     * @memberof Stats
     */
    pen: number;
    /**
     * 
     * @type {number}
     * @memberof Stats
     */
    nature: number;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ReqFields} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dpsPost(body: ReqFields, options: any = {}): RequestArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling dpsPost.');
            }
            const localVarPath = `/dps`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarHeaderParameter['Content-Type'] = 'application/json;charset=utf-8';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"ReqFields" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ReqFields} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        equivalencePost(body: ReqFields, options: any = {}): RequestArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling equivalencePost.');
            }
            const localVarPath = `/equivalence`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


                localVarHeaderParameter['Content-Type'] = 'application/json;charset=utf-8';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"ReqFields" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ReqFields} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dpsPost(body: ReqFields, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<number> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).dpsPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {ReqFields} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        equivalencePost(body: ReqFields, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Array<object>>> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).equivalencePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {ReqFields} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dpsPost(body: ReqFields, options?: any) {
            return DefaultApiFp(configuration).dpsPost(body, options)(axios, basePath);
        },
        /**
         * 
         * @param {ReqFields} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        equivalencePost(body: ReqFields, options?: any) {
            return DefaultApiFp(configuration).equivalencePost(body, options)(axios, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {ReqFields} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public dpsPost(body: ReqFields, options?: any) {
        return DefaultApiFp(this.configuration).dpsPost(body, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {ReqFields} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public equivalencePost(body: ReqFields, options?: any) {
        return DefaultApiFp(this.configuration).equivalencePost(body, options)(this.axios, this.basePath);
    }

}


